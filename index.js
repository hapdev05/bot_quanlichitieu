require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');

// Initialize bot with options
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
    polling: {
        interval: 300,
        params: {
            timeout: 10
        }
    },
    onlyFirstMatch: true,
    filepath: false
});

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// File to store transactions
const TRANSACTIONS_FILE = 'transactions.json';

// Initialize transactions file if it doesn't exist
if (!fs.existsSync(TRANSACTIONS_FILE)) {
    fs.writeFileSync(TRANSACTIONS_FILE, JSON.stringify([]));
}

// Load transactions
function loadTransactions() {
    return JSON.parse(fs.readFileSync(TRANSACTIONS_FILE, 'utf8'));
}

// Save transactions
function saveTransactions(transactions) {
    fs.writeFileSync(TRANSACTIONS_FILE, JSON.stringify(transactions, null, 2));
}

// Helper function to format currency
function formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
}

// H√†m chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá d·∫°ng k, m th√†nh s·ªë
function parseMoneyString(str) {
    // Chuy·ªÉn t·∫•t c·∫£ v·ªÅ ch·ªØ th∆∞·ªùng
    str = str.toLowerCase().trim();
    
    // T√¨m s·ªë v√† ƒë∆°n v·ªã
    const match = str.match(/^[+-]?(\d+)(k|m)?$/);
    if (!match) return null;

    let [, number, unit] = match;
    number = parseInt(number);

    // Chuy·ªÉn ƒë·ªïi theo ƒë∆°n v·ªã
    switch (unit) {
        case 'k':
            return number * 1000;
        case 'm':
            return number * 1000000;
        default:
            return number;
    }
}

// Rate limiting
const userCooldowns = new Map();
const COOLDOWN_TIME = 2000; // 2 seconds cooldown

function isUserInCooldown(userId) {
    if (!userCooldowns.has(userId)) {
        return false;
    }
    const lastMessageTime = userCooldowns.get(userId);
    return Date.now() - lastMessageTime < COOLDOWN_TIME;
}

function updateUserCooldown(userId) {
    userCooldowns.set(userId, Date.now());
}

// Command handlers
bot.onText(/^\/start$/, (msg) => {
    const chatId = msg.chat.id;
    const welcome = `Xin ch√†o! T√¥i l√† Bot Qu·∫£n l√Ω Thu Chi üí∞

C√°ch s·ª≠ d·ª•ng:
1Ô∏è‚É£ Ghi kho·∫£n chi (m·∫∑c ƒë·ªãnh): 
    10k cafe
    1m tien nha
    -10k cafe

2Ô∏è‚É£ Ghi kho·∫£n thu (th√™m d·∫•u +): 
    +10k luong
    +1m thuong

C√°c l·ªánh:
üìä /xem - Xem s·ªï thu chi
üìà /thongke - Xem b√°o c√°o t·ªïng quan
ü§î /phanTich - Ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh

üí° L∆∞u √Ω: 
- k = ngh√¨n (10k = 10,000ƒë)
- m = tri·ªáu (1m = 1,000,000ƒë)`;
    bot.sendMessage(chatId, welcome, { parse_mode: 'HTML' });
});

// Remove old handler
bot.removeTextListener(/^[+-]?\d+[km]?\s+.+$/i);

// Handle regular messages for transaction extraction
bot.onText(/^(?!\/)[+-]?\d+[km]?\s+.+$/i, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Check cooldown
    if (isUserInCooldown(userId)) {
        return;
    }
    updateUserCooldown(userId);

    const text = msg.text.trim();
    const parts = text.split(/\s+/);
    const moneyStr = parts[0];
    const note = parts.slice(1).join(' ');

    // X·ª≠ l√Ω s·ªë ti·ªÅn
    const amount = parseMoneyString(moneyStr);
    if (!amount) {
        bot.sendMessage(chatId, '‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá\nV√≠ d·ª•: 10k, 100k, 1m');
        return;
    }

    // X√°c ƒë·ªãnh lo·∫°i giao d·ªãch
    const type = moneyStr.startsWith('+') ? 'income' : 'expense';

    try {
        // L∆∞u giao d·ªãch
        const transactions = loadTransactions();
        const newTransaction = {
            sotien: amount,
            ghichu: note,
            loai: type === 'income' ? 'thu' : 'chi',
            ngay: new Date().toISOString()
        };
        
        transactions.push(newTransaction);
        saveTransactions(transactions);

        // T√≠nh t·ªïng thu chi
        const totalIncome = transactions
            .filter(t => t.loai === 'thu')
            .reduce((sum, t) => sum + t.sotien, 0);

        const totalExpense = transactions
            .filter(t => t.loai === 'chi')
            .reduce((sum, t) => sum + t.sotien, 0);

        // Send response with formatted amount and totals
        const responseMsg = `‚úÖ ƒê√£ ghi ${newTransaction.loai === 'thu' ? 'kho·∫£n thu üí∞' : 'kho·∫£n chi üí∏'}: ${formatCurrency(newTransaction.sotien)}\nüìù Ghi ch√∫: ${newTransaction.ghichu}\n\n` + 
            `üìä T·ªïng k·∫øt:\n` +
            `üí∞ T·ªïng thu: ${formatCurrency(totalIncome)}\n` +
            `üí∏ T·ªïng chi: ${formatCurrency(totalExpense)}\n` +
            `üíé S·ªë d∆∞: ${formatCurrency(totalIncome - totalExpense)}`;
        
        await bot.sendMessage(chatId, responseMsg);
    } catch (error) {
        console.error('Error:', error);
        if (error.response && error.response.statusCode === 401) {
            console.error('Telegram token is invalid');
            process.exit(1);
        }
        bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i.');
    }
});

// View transactions
bot.onText(/\/xem/, (msg) => {
    const chatId = msg.chat.id;
    const transactions = loadTransactions();

    if (transactions.length === 0) {
        bot.sendMessage(chatId, 'üìù Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c ghi nh·∫≠n');
        return;
    }

    let message = 'üìä S·ªî THU CHI\n\n';
    transactions.forEach((t, i) => {
        const date = new Date(t.ngay).toLocaleDateString('vi-VN');
        const type = t.loai === 'thu' ? 'üí∞ Thu' : 'üí∏ Chi';
        message += `${i + 1}. ${type}: ${formatCurrency(t.sotien)}\nüìù ${t.ghichu}\nüìÖ ${date}\n\n`;
    });

    bot.sendMessage(chatId, message);
});

// Statistics
bot.onText(/\/thongke/, (msg) => {
    const chatId = msg.chat.id;
    const transactions = loadTransactions();

    const totalIncome = transactions
        .filter(t => t.loai === 'thu')
        .reduce((sum, t) => sum + t.sotien, 0);

    const totalExpense = transactions
        .filter(t => t.loai === 'chi')
        .reduce((sum, t) => sum + t.sotien, 0);

    const message = `üìä B√ÅO C√ÅO THU CHI\n\n` +
        `üí∞ T·ªïng thu: ${formatCurrency(totalIncome)}\n` +
        `üí∏ T·ªïng chi: ${formatCurrency(totalExpense)}\n` +
        `üíé S·ªë d∆∞: ${formatCurrency(totalIncome - totalExpense)}`;

    bot.sendMessage(chatId, message);
});

// AI Analysis
bot.onText(/\/phanTich/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        const transactions = loadTransactions();
        if (transactions.length === 0) {
            bot.sendMessage(chatId, '‚ùå Ch∆∞a c√≥ giao d·ªãch n√†o ƒë·ªÉ ph√¢n t√≠ch');
            return;
        }

        // T√≠nh t·ªïng thu chi
        const totalIncome = transactions
            .filter(t => t.loai === 'thu')
            .reduce((sum, t) => sum + t.sotien, 0);

        const totalExpense = transactions
            .filter(t => t.loai === 'chi')
            .reduce((sum, t) => sum + t.sotien, 0);

        // Ph√¢n lo·∫°i giao d·ªãch theo ng√†y
        const transactionsByDate = {};
        transactions.forEach(t => {
            const date = new Date(t.ngay).toLocaleDateString('vi-VN');
            if (!transactionsByDate[date]) {
                transactionsByDate[date] = [];
            }
            transactionsByDate[date].push(t);
        });

        // T·∫°o context cho AI
        const context = `Ph√¢n t√≠ch c√°c giao d·ªãch t√†i ch√≠nh sau:

T·ªîNG QUAN:
- T·ªïng thu: ${formatCurrency(totalIncome)}
- T·ªïng chi: ${formatCurrency(totalExpense)}
- S·ªë d∆∞: ${formatCurrency(totalIncome - totalExpense)}

CHI TI·∫æT GIAO D·ªäCH THEO NG√ÄY:
${Object.entries(transactionsByDate).map(([date, txs]) => `
${date}:
${txs.map(t => `- ${t.loai === 'thu' ? 'Thu' : 'Chi'}: ${formatCurrency(t.sotien)} - ${t.ghichu}`).join('\n')}`).join('\n')}

H√£y ph√¢n t√≠ch v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi sau (tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát):

1. T√¨nh h√¨nh thu chi:
- Thu nh·∫≠p v√† chi ti√™u c√≥ c√¢n ƒë·ªëi kh√¥ng?
- T·ª∑ l·ªá thu/chi nh∆∞ th·∫ø n√†o?

2. C√°c kho·∫£n chi ti√™u:
- Nh·ªØng kho·∫£n chi ti√™u l·ªõn nh·∫•t?
- C√≥ kho·∫£n chi ti√™u b·∫•t th∆∞·ªùng kh√¥ng?
- Chi ti√™u t·∫≠p trung v√†o nh·ªØng m·ª•c n√†o?

3. Xu h∆∞·ªõng:
- Xu h∆∞·ªõng chi ti√™u theo th·ªùi gian?
- C√≥ ng√†y n√†o chi ti√™u nhi·ªÅu b·∫•t th∆∞·ªùng kh√¥ng?

4. L·ªùi khuy√™n:
- C·∫ßn ƒëi·ªÅu ch·ªânh g√¨ ƒë·ªÉ c·∫£i thi·ªán t√¨nh h√¨nh t√†i ch√≠nh?
- C√°c g·ª£i √Ω ƒë·ªÉ ti·∫øt ki·ªám v√† qu·∫£n l√Ω chi ti√™u t·ªët h∆°n?

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch v√† d·ªÖ hi·ªÉu.`;

        // G·ª≠i tin nh·∫Øn ch·ªù
        const waitingMsg = await bot.sendMessage(chatId, 'ü§î ƒêang ph√¢n t√≠ch d·ªØ li·ªáu...');

        // G·ªçi Gemini API
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        const result = await model.generateContent(context);
        const response = await result.response;
        const analysis = response.text();

        // X√≥a tin nh·∫Øn ch·ªù
        await bot.deleteMessage(chatId, waitingMsg.message_id);

        // G·ª≠i k·∫øt qu·∫£ ph√¢n t√≠ch
        await bot.sendMessage(chatId, `üìä PH√ÇN T√çCH T√ÄI CH√çNH\n\n${analysis}`);
    } catch (error) {
        console.error('Error:', error);
        bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
});

// Error handling
bot.on('polling_error', (error) => {
    if (error.response && error.response.statusCode === 401) {
        console.error('Telegram token is invalid');
        process.exit(1);
    }
    console.error('Polling error:', error);
});
