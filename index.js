require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const ExcelJS = require('exceljs');
const schedule = require('node-schedule');

// Initialize bot with options
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
    polling: {
        interval: 300,
        params: {
            timeout: 10
        }
    },
    onlyFirstMatch: true,
    filepath: false
});

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Constants for files
const TRANSACTIONS_FILE = 'transactions.json';
const ACCOUNTS_FILE = 'accounts.json';
const REMINDERS_FILE = 'reminders.json';

// Initialize files if they don't exist
if (!fs.existsSync(TRANSACTIONS_FILE)) {
    fs.writeFileSync(TRANSACTIONS_FILE, JSON.stringify([]));
}
if (!fs.existsSync(ACCOUNTS_FILE)) {
    fs.writeFileSync(ACCOUNTS_FILE, JSON.stringify([]));
}
if (!fs.existsSync(REMINDERS_FILE)) {
    fs.writeFileSync(REMINDERS_FILE, JSON.stringify([]));
}

// Load transactions
function loadTransactions() {
    return JSON.parse(fs.readFileSync(TRANSACTIONS_FILE, 'utf8'));
}

// Save transactions
function saveTransactions(transactions) {
    fs.writeFileSync(TRANSACTIONS_FILE, JSON.stringify(transactions, null, 2));
}

// Load accounts
function loadAccounts() {
    return JSON.parse(fs.readFileSync(ACCOUNTS_FILE, 'utf8'));
}

// Save accounts
function saveAccounts(accounts) {
    fs.writeFileSync(ACCOUNTS_FILE, JSON.stringify(accounts, null, 2));
}

// Load reminders
function loadReminders() {
    return JSON.parse(fs.readFileSync(REMINDERS_FILE, 'utf8'));
}

// Save reminders
function saveReminders(reminders) {
    fs.writeFileSync(REMINDERS_FILE, JSON.stringify(reminders, null, 2));
}

// Helper function to format currency
function formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
}

// H√†m chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá d·∫°ng k, m th√†nh s·ªë
function parseMoneyString(str) {
    // Chuy·ªÉn t·∫•t c·∫£ v·ªÅ ch·ªØ th∆∞·ªùng
    str = str.toLowerCase().trim();
    
    // T√¨m s·ªë v√† ƒë∆°n v·ªã
    const match = str.match(/^[+-]?(\d+)(k|m)?$/);
    if (!match) return null;

    let [, number, unit] = match;
    number = parseInt(number);

    // Chuy·ªÉn ƒë·ªïi theo ƒë∆°n v·ªã
    switch (unit) {
        case 'k':
            return number * 1000;
        case 'm':
            return number * 1000000;
        default:
            return number;
    }
}

// Rate limiting
const userCooldowns = new Map();
const COOLDOWN_TIME = 2000; // 2 seconds cooldown

function isUserInCooldown(userId) {
    if (!userCooldowns.has(userId)) {
        return false;
    }
    const lastMessageTime = userCooldowns.get(userId);
    return Date.now() - lastMessageTime < COOLDOWN_TIME;
}

function updateUserCooldown(userId) {
    userCooldowns.set(userId, Date.now());
}

// Helper function to get week number
function getWeekNumber(date) {
    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;
    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
}

// Helper function to format date ranges
function formatDateRange(start, end) {
    return `${start.toLocaleDateString('vi-VN')} - ${end.toLocaleDateString('vi-VN')}`;
}

// Command handlers
bot.onText(/^\/start$/, (msg) => {
    const chatId = msg.chat.id;
    const welcome = `Xin ch√†o! T√¥i l√† Bot Qu·∫£n l√Ω Thu Chi üí∞

C√°ch s·ª≠ d·ª•ng:
1Ô∏è‚É£ Ghi kho·∫£n chi (m·∫∑c ƒë·ªãnh): 
    10k cafe
    1m tien nha
    -10k cafe

2Ô∏è‚É£ Ghi kho·∫£n thu (th√™m d·∫•u +): 
    +10k luong
    +1m thuong

C√°c l·ªánh c∆° b·∫£n:
üìä /xem - Xem s·ªï thu chi
üìà /thongke - Xem b√°o c√°o t·ªïng quan
ü§î /phanTich - Ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh
‚ùå /xoa - X√≥a giao d·ªãch
üóëÔ∏è /xoahet - X√≥a t·∫•t c·∫£ l·ªãch s·ª≠

Qu·∫£n l√Ω t√†i kho·∫£n:
üí≥ /taikhoan - Xem danh s√°ch t√†i kho·∫£n
‚ûï /themtk - Th√™m t√†i kho·∫£n m·ªõi (VD: /themtk V√≠ 100k)
‚úèÔ∏è /capnhattk - C·∫≠p nh·∫≠t s·ªë d∆∞ (VD: /capnhattk V√≠ 150k)
‚ùå /xoatk - X√≥a t√†i kho·∫£n (VD: /xoatk V√≠)

T√¨m ki·∫øm v√† L·ªçc:
üîç /timkiem [t·ª´ kh√≥a] - T√¨m giao d·ªãch
üìÖ /loc [s·ªë ng√†y] [lo·∫°i] - L·ªçc theo th·ªùi gian

Ti·ªán √≠ch:
‚è∞ /nhacnho - Qu·∫£n l√Ω nh·∫Øc nh·ªü thanh to√°n ƒë·ªãnh k·ª≥
üìä /xuatexcel - Xu·∫•t b√°o c√°o Excel

üí° L∆∞u √Ω: 
- k = ngh√¨n (10k = 10,000ƒë)
- m = tri·ªáu (1m = 1,000,000ƒë)`;
    bot.sendMessage(chatId, welcome, { parse_mode: 'HTML' });
});

// Remove old handler
bot.removeTextListener(/^[+-]?\d+[km]?\s+.+$/i);

// Handle regular messages for transaction extraction
bot.onText(/^(?!\/)[+-]?\d+[km]?\s+.+$/i, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Check cooldown
    if (isUserInCooldown(userId)) {
        return;
    }
    updateUserCooldown(userId);

    const text = msg.text.trim();
    const parts = text.split(/\s+/);
    const moneyStr = parts[0];
    const note = parts.slice(1).join(' ');

    // X·ª≠ l√Ω s·ªë ti·ªÅn
    const amount = parseMoneyString(moneyStr);
    if (!amount) {
        bot.sendMessage(chatId, '‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá\nV√≠ d·ª•: 10k, 100k, 1m');
        return;
    }

    // X√°c ƒë·ªãnh lo·∫°i giao d·ªãch
    const type = moneyStr.startsWith('+') ? 'income' : 'expense';

    try {
        // Ki·ªÉm tra t√†i kho·∫£n
        const accounts = loadAccounts();
        if (accounts.length === 0) {
            bot.sendMessage(chatId, '‚ùå Vui l√≤ng t·∫°o √≠t nh·∫•t m·ªôt t√†i kho·∫£n tr∆∞·ªõc khi ghi ch√©p thu chi.\nS·ª≠ d·ª•ng l·ªánh /themtk ƒë·ªÉ th√™m t√†i kho·∫£n.');
            return;
        }

        // N·∫øu ch·ªâ c√≥ m·ªôt t√†i kho·∫£n, s·ª≠ d·ª•ng t√†i kho·∫£n ƒë√≥
        // N·∫øu c√≥ nhi·ªÅu t√†i kho·∫£n, h·ªèi ng∆∞·ªùi d√πng mu·ªën s·ª≠ d·ª•ng t√†i kho·∫£n n√†o
        let selectedAccount;
        if (accounts.length === 1) {
            selectedAccount = accounts[0];
            // C·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n
            selectedAccount.sodu += (type === 'income' ? amount : -amount);
            saveAccounts(accounts);
        } else {
            // T·∫°o keyboard v·ªõi c√°c t√†i kho·∫£n
            const keyboard = accounts.map(acc => [{
                text: `${acc.ten} (${formatCurrency(acc.sodu)})`,
                callback_data: `select_account:${acc.ten}:${amount}:${type}:${note}`
            }]);

            await bot.sendMessage(chatId, 
                'üìù Ch·ªçn t√†i kho·∫£n ƒë·ªÉ ghi nh·∫≠n giao d·ªãch:', 
                {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                }
            );
            return;
        }

        // L∆∞u giao d·ªãch
        const transactions = loadTransactions();
        const newTransaction = {
            sotien: amount,
            ghichu: note,
            loai: type === 'income' ? 'thu' : 'chi',
            ngay: new Date().toISOString(),
            taikhoan: selectedAccount.ten
        };
        
        transactions.push(newTransaction);
        saveTransactions(transactions);

        // T√≠nh t·ªïng thu chi
        const totalIncome = transactions
            .filter(t => t.loai === 'thu')
            .reduce((sum, t) => sum + t.sotien, 0);
        const totalExpense = transactions
            .filter(t => t.loai === 'chi')
            .reduce((sum, t) => sum + t.sotien, 0);

        // G·ª≠i th√¥ng b√°o
        let message = `‚úÖ ƒê√£ ghi nh·∫≠n giao d·ªãch:\n`;
        message += `${type === 'income' ? 'üí∞ Thu' : 'üí∏ Chi'}: ${formatCurrency(amount)}\n`;
        message += `üìù Ghi ch√∫: ${note}\n`;
        message += `üí≥ T√†i kho·∫£n: ${selectedAccount.ten}\n`;
        message += `üíµ S·ªë d∆∞ t√†i kho·∫£n: ${formatCurrency(selectedAccount.sodu)}\n\n`;
        message += `üìä T·ªïng thu: ${formatCurrency(totalIncome)}\n`;
        message += `üìä T·ªïng chi: ${formatCurrency(totalExpense)}\n`;
        message += `üíé C√≤n l·∫°i: ${formatCurrency(totalIncome - totalExpense)}`;

        bot.sendMessage(chatId, message);
    } catch (error) {
        console.error('Error in transaction handler:', error);
        bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi ghi nh·∫≠n giao d·ªãch.');
    }
});

// Handle account selection for transactions
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    try {
        if (data.startsWith('select_account:')) {
            const [, accountName, amount, type, ...noteParts] = data.split(':');
            const note = noteParts.join(':');
            const accounts = loadAccounts();
            const selectedAccount = accounts.find(a => a.ten === accountName);

            if (!selectedAccount) {
                await bot.sendMessage(chatId, '‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n n√†y!');
                return;
            }

            // C·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n
            selectedAccount.sodu += (type === 'income' ? Number(amount) : -Number(amount));
            saveAccounts(accounts);

            // L∆∞u giao d·ªãch
            const transactions = loadTransactions();
            const newTransaction = {
                sotien: Number(amount),
                ghichu: note,
                loai: type === 'income' ? 'thu' : 'chi',
                ngay: new Date().toISOString(),
                taikhoan: accountName
            };
            
            transactions.push(newTransaction);
            saveTransactions(transactions);

            // T√≠nh t·ªïng thu chi
            const totalIncome = transactions
                .filter(t => t.loai === 'thu')
                .reduce((sum, t) => sum + t.sotien, 0);
            const totalExpense = transactions
                .filter(t => t.loai === 'chi')
                .reduce((sum, t) => sum + t.sotien, 0);

            // C·∫≠p nh·∫≠t tin nh·∫Øn
            let message = `‚úÖ ƒê√£ ghi nh·∫≠n giao d·ªãch:\n`;
            message += `${type === 'income' ? 'üí∞ Thu' : 'üí∏ Chi'}: ${formatCurrency(Number(amount))}\n`;
            message += `üìù Ghi ch√∫: ${note}\n`;
            message += `üí≥ T√†i kho·∫£n: ${accountName}\n`;
            message += `üíµ S·ªë d∆∞ t√†i kho·∫£n: ${formatCurrency(selectedAccount.sodu)}\n\n`;
            message += `üìä T·ªïng thu: ${formatCurrency(totalIncome)}\n`;
            message += `üìä T·ªïng chi: ${formatCurrency(totalExpense)}\n`;
            message += `üíé C√≤n l·∫°i: ${formatCurrency(totalIncome - totalExpense)}`;

            await bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId
            });
        }
        
        // Answer callback query to remove loading state
        await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
        console.error('Error in callback query:', error);
        bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu.');
    }
});

// View transactions
bot.onText(/\/xem/, (msg) => {
    const chatId = msg.chat.id;
    const transactions = loadTransactions();

    if (transactions.length === 0) {
        bot.sendMessage(chatId, 'üìù Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c ghi nh·∫≠n');
        return;
    }

    let message = 'üìä S·ªî THU CHI\n\n';
    transactions.forEach((t, i) => {
        const date = new Date(t.ngay).toLocaleDateString('vi-VN');
        const type = t.loai === 'thu' ? 'üí∞ Thu' : 'üí∏ Chi';
        message += `${i + 1}. ${type}: ${formatCurrency(t.sotien)}\nüìù ${t.ghichu}\nüí≥ ${t.taikhoan}\nüìÖ ${date}\n\n`;
    });

    bot.sendMessage(chatId, message);
});

// Statistics
bot.onText(/\/thongke/, (msg) => {
    const chatId = msg.chat.id;
    const transactions = loadTransactions();

    if (transactions.length === 0) {
        bot.sendMessage(chatId, '‚ùå Ch∆∞a c√≥ giao d·ªãch n√†o.');
        return;
    }

    // Calculate totals
    const totalIncome = transactions
        .filter(t => t.loai === 'thu')
        .reduce((sum, t) => sum + t.sotien, 0);

    const totalExpense = transactions
        .filter(t => t.loai === 'chi')
        .reduce((sum, t) => sum + t.sotien, 0);

    // Group transactions by month
    const monthlyStats = {};
    const weeklyStats = {};
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth();

    transactions.forEach(t => {
        const date = new Date(t.ngay);
        const month = date.getMonth();
        const week = getWeekNumber(date);
        const monthKey = `${date.getFullYear()}-${month + 1}`;
        const weekKey = `${date.getFullYear()}-W${week}`;

        // Initialize if not exists
        if (!monthlyStats[monthKey]) {
            monthlyStats[monthKey] = { income: 0, expense: 0 };
        }
        if (!weeklyStats[weekKey]) {
            weeklyStats[weekKey] = { income: 0, expense: 0, startDate: new Date(date) };
        }

        // Add to monthly stats
        if (t.loai === 'thu') {
            monthlyStats[monthKey].income += t.sotien;
        } else {
            monthlyStats[monthKey].expense += t.sotien;
        }

        // Add to weekly stats
        if (t.loai === 'thu') {
            weeklyStats[weekKey].income += t.sotien;
        } else {
            weeklyStats[weekKey].expense += t.sotien;
        }
    });

    // Create message
    let message = `üìä B√ÅO C√ÅO THU CHI C·ª¶A PHI\n\n`;
    message += `üí∞ T·ªïng thu: ${formatCurrency(totalIncome)}\n`;
    message += `üí∏ T·ªïng chi: ${formatCurrency(totalExpense)}\n`;
    message += `üíé S·ªë d∆∞: ${formatCurrency(totalIncome - totalExpense)}\n\n`;

    // Add monthly breakdown (last 3 months)
    message += `üìÖ TH·ªêNG K√ä THEO TH√ÅNG\n`;
    const monthKeys = Object.keys(monthlyStats)
        .sort((a, b) => b.localeCompare(a))
        .slice(0, 3);

    monthKeys.forEach(key => {
        const [year, month] = key.split('-');
        const stats = monthlyStats[key];
        message += `\nTh√°ng ${month}/${year}:\n`;
        message += `  üí∞ Thu: ${formatCurrency(stats.income)}\n`;
        message += `  üí∏ Chi: ${formatCurrency(stats.expense)}\n`;
        message += `  üíé C√≤n: ${formatCurrency(stats.income - stats.expense)}\n`;
    });

    // Add weekly breakdown (last 2 weeks)
    message += `\nüìÜ TH·ªêNG K√ä THEO TU·∫¶N\n`;
    const weekKeys = Object.keys(weeklyStats)
        .sort((a, b) => b.localeCompare(a))
        .slice(0, 2);

    weekKeys.forEach(key => {
        const stats = weeklyStats[key];
        const startDate = new Date(stats.startDate);
        const endDate = new Date(startDate);
        endDate.setDate(startDate.getDate() + 6);
        
        message += `\n${formatDateRange(startDate, endDate)}:\n`;
        message += `  üí∞ Thu: ${formatCurrency(stats.income)}\n`;
        message += `  üí∏ Chi: ${formatCurrency(stats.expense)}\n`;
        message += `  üíé C√≤n: ${formatCurrency(stats.income - stats.expense)}\n`;
    });

    bot.sendMessage(chatId, message);
});

// AI Analysis
bot.onText(/\/phanTich/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        const transactions = loadTransactions();
        if (transactions.length === 0) {
            bot.sendMessage(chatId, '‚ùå Ch∆∞a c√≥ giao d·ªãch n√†o ƒë·ªÉ ph√¢n t√≠ch');
            return;
        }

        // T√≠nh t·ªïng thu chi
        const totalIncome = transactions
            .filter(t => t.loai === 'thu')
            .reduce((sum, t) => sum + t.sotien, 0);

        const totalExpense = transactions
            .filter(t => t.loai === 'chi')
            .reduce((sum, t) => sum + t.sotien, 0);

        // Ph√¢n lo·∫°i giao d·ªãch theo ng√†y
        const transactionsByDate = {};
        transactions.forEach(t => {
            const date = new Date(t.ngay).toLocaleDateString('vi-VN');
            if (!transactionsByDate[date]) {
                transactionsByDate[date] = [];
            }
            transactionsByDate[date].push(t);
        });

        // T·∫°o context cho AI
        const context = `Ph√¢n t√≠ch c√°c giao d·ªãch t√†i ch√≠nh sau:

T·ªîNG QUAN:
- T·ªïng thu: ${formatCurrency(totalIncome)}
- T·ªïng chi: ${formatCurrency(totalExpense)}
- S·ªë d∆∞: ${formatCurrency(totalIncome - totalExpense)}

CHI TI·∫æT GIAO D·ªäCH THEO NG√ÄY:
${Object.entries(transactionsByDate).map(([date, txs]) => `
${date}:
${txs.map(t => `- ${t.loai === 'thu' ? 'Thu' : 'Chi'}: ${formatCurrency(t.sotien)} - ${t.ghichu}`).join('\n')}`).join('\n')}

H√£y ph√¢n t√≠ch v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi sau (tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát):

1. T√¨nh h√¨nh thu chi:
- Thu nh·∫≠p v√† chi ti√™u c√≥ c√¢n ƒë·ªëi kh√¥ng?
- T·ª∑ l·ªá thu/chi nh∆∞ th·∫ø n√†o?

2. C√°c kho·∫£n chi ti√™u:
- Nh·ªØng kho·∫£n chi ti√™u l·ªõn nh·∫•t?
- C√≥ kho·∫£n chi ti√™u b·∫•t th∆∞·ªùng kh√¥ng?
- Chi ti√™u t·∫≠p trung v√†o nh·ªØng m·ª•c n√†o?

3. Xu h∆∞·ªõng:
- Xu h∆∞·ªõng chi ti√™u theo th·ªùi gian?
- C√≥ ng√†y n√†o chi ti√™u nhi·ªÅu b·∫•t th∆∞·ªùng kh√¥ng?

4. L·ªùi khuy√™n:
- C·∫ßn ƒëi·ªÅu ch·ªânh g√¨ ƒë·ªÉ c·∫£i thi·ªán t√¨nh h√¨nh t√†i ch√≠nh?
- C√°c g·ª£i √Ω ƒë·ªÉ ti·∫øt ki·ªám v√† qu·∫£n l√Ω chi ti√™u t·ªët h∆°n?

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch v√† d·ªÖ hi·ªÉu.`;

        // G·ª≠i tin nh·∫Øn ch·ªù
        const waitingMsg = await bot.sendMessage(chatId, 'ü§î ƒêang ph√¢n t√≠ch d·ªØ li·ªáu...');

        // G·ªçi Gemini API
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        const result = await model.generateContent(context);
        const response = await result.response;
        const analysis = response.text();

        // X√≥a tin nh·∫Øn ch·ªù
        await bot.deleteMessage(chatId, waitingMsg.message_id);

        // G·ª≠i k·∫øt qu·∫£ ph√¢n t√≠ch
        await bot.sendMessage(chatId, `üìä PH√ÇN T√çCH T√ÄI CH√çNH\n\n${analysis}`);
    } catch (error) {
        console.error('Error:', error);
        bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
});

// Command to add new account
bot.onText(/\/themtk (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const input = match[1].split(' ');
    
    if (input.length < 2) {
        bot.sendMessage(chatId, '‚ùå Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng: /themtk [t√™n t√†i kho·∫£n] [s·ªë d∆∞]\nV√≠ d·ª•: /themtk V√≠ 100k');
        return;
    }

    const balance = parseMoneyString(input[input.length - 1]);
    if (balance === null) {
        bot.sendMessage(chatId, '‚ùå S·ªë d∆∞ kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng: 100k, 1m, ...');
        return;
    }

    const name = input.slice(0, -1).join(' ');
    const accounts = loadAccounts();
    
    // Check if account already exists
    if (accounts.some(a => a.ten.toLowerCase() === name.toLowerCase())) {
        bot.sendMessage(chatId, '‚ùå T√†i kho·∫£n n√†y ƒë√£ t·ªìn t·∫°i!');
        return;
    }

    accounts.push({
        ten: name,
        sodu: balance
    });
    
    saveAccounts(accounts);
    bot.sendMessage(chatId, `‚úÖ ƒê√£ th√™m t√†i kho·∫£n "${name}" v·ªõi s·ªë d∆∞ ${formatCurrency(balance)}`);
});

// Command to view accounts
bot.onText(/\/taikhoan/, (msg) => {
    const chatId = msg.chat.id;
    const accounts = loadAccounts();

    if (accounts.length === 0) {
        bot.sendMessage(chatId, '‚ùå Ch∆∞a c√≥ t√†i kho·∫£n n√†o.');
        return;
    }

    let message = 'üí≥ DANH S√ÅCH T√ÄI KHO·∫¢N\n\n';
    let totalBalance = 0;

    accounts.forEach((account, index) => {
        message += `${index + 1}. ${account.ten}\n`;
        message += `   üí∞ S·ªë d∆∞: ${formatCurrency(account.sodu)}\n\n`;
        totalBalance += account.sodu;
    });

    message += `\nüíµ T·ªîNG S·ªê D∆Ø: ${formatCurrency(totalBalance)}`;
    bot.sendMessage(chatId, message);
});

// Command to delete account
bot.onText(/\/xoatk (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const accountName = match[1];
    const accounts = loadAccounts();
    
    const index = accounts.findIndex(a => a.ten.toLowerCase() === accountName.toLowerCase());
    if (index === -1) {
        bot.sendMessage(chatId, '‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n n√†y!');
        return;
    }

    const deleted = accounts.splice(index, 1)[0];
    saveAccounts(accounts);
    bot.sendMessage(chatId, `‚úÖ ƒê√£ x√≥a t√†i kho·∫£n "${deleted.ten}" v·ªõi s·ªë d∆∞ ${formatCurrency(deleted.sodu)}`);
});

// Command to update account balance
bot.onText(/\/capnhattk (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const input = match[1].split(' ');
    
    if (input.length < 2) {
        bot.sendMessage(chatId, '‚ùå Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng: /capnhattk [t√™n t√†i kho·∫£n] [s·ªë d∆∞ m·ªõi]\nV√≠ d·ª•: /capnhattk V√≠ 150k');
        return;
    }

    const newBalance = parseMoneyString(input[input.length - 1]);
    if (newBalance === null) {
        bot.sendMessage(chatId, '‚ùå S·ªë d∆∞ kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng: 100k, 1m, ...');
        return;
    }

    const accountName = input.slice(0, -1).join(' ');
    const accounts = loadAccounts();
    
    const account = accounts.find(a => a.ten.toLowerCase() === accountName.toLowerCase());
    if (!account) {
        bot.sendMessage(chatId, '‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n n√†y!');
        return;
    }

    const oldBalance = account.sodu;
    account.sodu = newBalance;
    saveAccounts(accounts);
    
    bot.sendMessage(chatId, 
        `‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n "${account.ten}":\n` +
        `S·ªë d∆∞ c≈©: ${formatCurrency(oldBalance)}\n` +
        `S·ªë d∆∞ m·ªõi: ${formatCurrency(newBalance)}`
    );
});

// Command to delete a transaction
bot.onText(/\/xoa(\s+\d+)?$/, (msg, match) => {
    const chatId = msg.chat.id;
    const index = match[1] ? parseInt(match[1].trim()) - 1 : null;

    try {
        const transactions = loadTransactions();

        if (transactions.length === 0) {
            bot.sendMessage(chatId, '‚ùå Kh√¥ng c√≥ giao d·ªãch n√†o ƒë·ªÉ x√≥a.');
            return;
        }

        if (index === null) {
            // Show list of transactions with numbers
            let message = 'üìù Danh s√°ch giao d·ªãch:\n\n';
            transactions.forEach((t, i) => {
                const date = new Date(t.ngay).toLocaleDateString('vi-VN');
                const amount = formatCurrency(t.sotien);
                message += `${i + 1}. ${date}: ${amount} - ${t.ghichu}\n`;
            });
            message += '\nüí° ƒê·ªÉ x√≥a, h√£y g·ª≠i "/xoa [s·ªë th·ª© t·ª±]"\nV√≠ d·ª•: /xoa 1';
            bot.sendMessage(chatId, message);
            return;
        }

        if (index < 0 || index >= transactions.length) {
            bot.sendMessage(chatId, '‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá.');
            return;
        }

        // Remove the transaction
        const deleted = transactions.splice(index, 1)[0];
        saveTransactions(transactions);

        const date = new Date(deleted.ngay).toLocaleDateString('vi-VN');
        const amount = formatCurrency(deleted.sotien);
        bot.sendMessage(chatId, `‚úÖ ƒê√£ x√≥a giao d·ªãch:\n${date}: ${amount} - ${deleted.ghichu}`);
    } catch (error) {
        console.error('Error in delete command:', error);
        bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a giao d·ªãch.');
    }
});

// Command to clear all transaction history
bot.onText(/\/xoahet/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        const transactions = loadTransactions();
        
        if (transactions.length === 0) {
            bot.sendMessage(chatId, '‚ùå Kh√¥ng c√≥ giao d·ªãch n√†o ƒë·ªÉ x√≥a.');
            return;
        }

        // Ask for confirmation with inline keyboard
        await bot.sendMessage(
            chatId,
            `‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ ${transactions.length} giao d·ªãch kh√¥ng?`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ C√≥, x√≥a h·∫øt', callback_data: 'confirm_delete_all' },
                            { text: '‚ùå Kh√¥ng, h·ªßy b·ªè', callback_data: 'cancel_delete_all' }
                        ]
                    ]
                }
            }
        );

    } catch (error) {
        console.error('Error in clear history command:', error);
        bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a l·ªãch s·ª≠.');
    }
});

// Handle inline keyboard callbacks
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;

    try {
        if (callbackQuery.data === 'confirm_delete_all') {
            const transactions = loadTransactions();
            const totalAmount = transactions.reduce((sum, t) => sum + t.sotien, 0);
            const incomeAmount = transactions.reduce((sum, t) => t.loai === 'thu' ? sum + t.sotien : sum, 0);
            const expenseAmount = transactions.reduce((sum, t) => t.loai === 'chi' ? sum + t.sotien : sum, 0);
            
            // Clear all transactions
            saveTransactions([]);
            
            const message = `‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ ${transactions.length} giao d·ªãch:\n\n` +
                          `üìä T·ªïng quan ƒë√£ x√≥a:\n` +
                          `üí∞ T·ªïng thu: ${formatCurrency(incomeAmount)}\n` +
                          `üí∏ T·ªïng chi: ${formatCurrency(expenseAmount)}\n` +
                          `üíµ S·ªë d∆∞: ${formatCurrency(totalAmount)}`;
            
            await bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId
            });
        } else if (callbackQuery.data === 'cancel_delete_all') {
            await bot.editMessageText('‚ùå ƒê√£ h·ªßy x√≥a l·ªãch s·ª≠.', {
                chat_id: chatId,
                message_id: messageId
            });
        }
        
        // Answer callback query to remove loading state
        await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
        console.error('Error in callback query:', error);
        bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu.');
    }
});

// Command to search transactions
bot.onText(/\/timkiem (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const keyword = match[1].toLowerCase();
    const transactions = loadTransactions();

    const filtered = transactions.filter(t => 
        t.ghichu.toLowerCase().includes(keyword) || 
        t.taikhoan.toLowerCase().includes(keyword)
    );

    if (filtered.length === 0) {
        bot.sendMessage(chatId, '‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o.');
        return;
    }

    let message = `üîç K·∫æT QU·∫¢ T√åM KI·∫æM (${filtered.length} giao d·ªãch)\n\n`;
    filtered.forEach((t, i) => {
        const date = new Date(t.ngay).toLocaleDateString('vi-VN');
        const type = t.loai === 'thu' ? 'üí∞ Thu' : 'üí∏ Chi';
        message += `${i + 1}. ${type}: ${formatCurrency(t.sotien)}\nüìù ${t.ghichu}\nüí≥ ${t.taikhoan}\nüìÖ ${date}\n\n`;
    });

    bot.sendMessage(chatId, message);
});

// Command to filter transactions by date range
bot.onText(/\/loc (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const params = match[1].split(' ');
    
    if (params.length !== 2) {
        bot.sendMessage(chatId, 
            '‚ùå Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng: /loc [s·ªë ng√†y] [lo·∫°i]\n' +
            'Lo·∫°i: thu, chi, all\n' +
            'V√≠ d·ª•:\n' +
            '/loc 7 all (xem t·∫•t c·∫£ giao d·ªãch 7 ng√†y qua)\n' +
            '/loc 30 thu (xem kho·∫£n thu 30 ng√†y qua)\n' +
            '/loc 90 chi (xem kho·∫£n chi 90 ng√†y qua)'
        );
        return;
    }

    const days = parseInt(params[0]);
    const type = params[1].toLowerCase();
    
    if (isNaN(days) || days <= 0) {
        bot.sendMessage(chatId, '‚ùå S·ªë ng√†y kh√¥ng h·ª£p l·ªá.');
        return;
    }

    if (!['thu', 'chi', 'all'].includes(type)) {
        bot.sendMessage(chatId, '‚ùå Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn: thu, chi, ho·∫∑c all');
        return;
    }

    const transactions = loadTransactions();
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - days);

    const filtered = transactions.filter(t => {
        const transDate = new Date(t.ngay);
        return transDate >= cutoffDate && 
               (type === 'all' || 
                (type === 'thu' && t.loai === 'thu') || 
                (type === 'chi' && t.loai === 'chi'));
    });

    if (filtered.length === 0) {
        bot.sendMessage(chatId, '‚ùå Kh√¥ng c√≥ giao d·ªãch n√†o trong kho·∫£ng th·ªùi gian n√†y.');
        return;
    }

    // Calculate totals
    const totalIncome = filtered
        .filter(t => t.loai === 'thu')
        .reduce((sum, t) => sum + t.sotien, 0);
    const totalExpense = filtered
        .filter(t => t.loai === 'chi')
        .reduce((sum, t) => sum + t.sotien, 0);

    let message = `üìä GIAO D·ªäCH ${days} NG√ÄY QUA\n\n`;
    
    // Add summary
    message += `üí∞ T·ªïng thu: ${formatCurrency(totalIncome)}\n`;
    message += `üí∏ T·ªïng chi: ${formatCurrency(totalExpense)}\n`;
    message += `üíé C√≤n l·∫°i: ${formatCurrency(totalIncome - totalExpense)}\n\n`;
    
    // Group by account
    const accountStats = {};
    filtered.forEach(t => {
        if (!accountStats[t.taikhoan]) {
            accountStats[t.taikhoan] = { thu: 0, chi: 0 };
        }
        if (t.loai === 'thu') {
            accountStats[t.taikhoan].thu += t.sotien;
        } else {
            accountStats[t.taikhoan].chi += t.sotien;
        }
    });

    // Add account summary
    message += `üìä THEO T√ÄI KHO·∫¢N:\n`;
    Object.entries(accountStats).forEach(([account, stats]) => {
        message += `\nüí≥ ${account}:\n`;
        message += `  üí∞ Thu: ${formatCurrency(stats.thu)}\n`;
        message += `  üí∏ Chi: ${formatCurrency(stats.chi)}\n`;
        message += `  üíé C√≤n: ${formatCurrency(stats.thu - stats.chi)}\n`;
    });

    message += `\nüìù CHI TI·∫æT GIAO D·ªäCH:\n`;
    filtered.forEach((t, i) => {
        const date = new Date(t.ngay).toLocaleDateString('vi-VN');
        const type = t.loai === 'thu' ? 'üí∞ Thu' : 'üí∏ Chi';
        message += `\n${i + 1}. ${type}: ${formatCurrency(t.sotien)}\nüìù ${t.ghichu}\nüí≥ ${t.taikhoan}\nüìÖ ${date}`;
    });

    bot.sendMessage(chatId, message);
});

// Command to add reminder
bot.onText(/\/nhacnho/, (msg) => {
    const chatId = msg.chat.id;
    
    const options = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚ûï Th√™m nh·∫Øc nh·ªü m·ªõi', callback_data: 'add_reminder' }],
                [{ text: 'üìã Xem danh s√°ch nh·∫Øc nh·ªü', callback_data: 'list_reminders' }],
                [{ text: '‚ùå X√≥a nh·∫Øc nh·ªü', callback_data: 'delete_reminder' }]
            ]
        }
    };
    
    bot.sendMessage(chatId, '‚è∞ QU·∫¢N L√ù NH·∫ÆC NH·ªû THANH TO√ÅN\n\nCh·ªçn thao t√°c:', options);
});

// Handle reminder setup flow
const reminderSetupStates = new Map();

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    if (data === 'add_reminder') {
        reminderSetupStates.set(chatId, { step: 1 });
        const periods = [
            [{ text: 'H√†ng th√°ng', callback_data: 'period_monthly' }],
            [{ text: 'H√†ng qu√Ω', callback_data: 'period_quarterly' }],
            [{ text: 'H√†ng nƒÉm', callback_data: 'period_yearly' }]
        ];
        
        await bot.editMessageText('Ch·ªçn chu k·ª≥ nh·∫Øc nh·ªü:', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: periods }
        });
    }
    else if (data.startsWith('period_')) {
        const state = reminderSetupStates.get(chatId) || {};
        state.period = data.replace('period_', '');
        state.step = 2;
        reminderSetupStates.set(chatId, state);
        
        await bot.editMessageText(
            'Nh·∫≠p s·ªë ti·ªÅn v√† ghi ch√∫ (VD: 100k ti·ªÅn ƒëi·ªán):', 
            {
                chat_id: chatId,
                message_id: messageId
            }
        );
    }
    else if (data === 'list_reminders') {
        const reminders = loadReminders();
        if (reminders.length === 0) {
            await bot.editMessageText('‚ùå Ch∆∞a c√≥ nh·∫Øc nh·ªü n√†o.', {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        let message = 'üìã DANH S√ÅCH NH·∫ÆC NH·ªû\n\n';
        reminders.forEach((r, i) => {
            message += `${i + 1}. ${r.note}\n`;
            message += `üí∞ S·ªë ti·ªÅn: ${formatCurrency(r.amount)}\n`;
            message += `üîÑ ƒê·ªãnh k·ª≥: ${r.period}\n\n`;
        });

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId
        });
    }
    else if (data === 'delete_reminder') {
        const reminders = loadReminders();
        if (reminders.length === 0) {
            await bot.editMessageText('‚ùå Ch∆∞a c√≥ nh·∫Øc nh·ªü n√†o ƒë·ªÉ x√≥a.', {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        const keyboard = reminders.map((r, i) => [{
            text: `${i + 1}. ${r.note} (${formatCurrency(r.amount)})`,
            callback_data: `delete_reminder_${i}`
        }]);

        await bot.editMessageText('Ch·ªçn nh·∫Øc nh·ªü c·∫ßn x√≥a:', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: keyboard }
        });
    }
    else if (data.startsWith('delete_reminder_')) {
        const index = parseInt(data.split('_')[2]);
        const reminders = loadReminders();
        const deleted = reminders.splice(index, 1)[0];
        saveReminders(reminders);
        
        // Cancel the scheduled job
        const job = schedule.scheduledJobs[deleted.id];
        if (job) {
            job.cancel();
        }

        await bot.editMessageText(`‚úÖ ƒê√£ x√≥a nh·∫Øc nh·ªü: ${deleted.note}`, {
            chat_id: chatId,
            message_id: messageId
        });
    }

    await bot.answerCallbackQuery(callbackQuery.id);
});

// Handle reminder amount and note input
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const state = reminderSetupStates.get(chatId);
    
    if (state && state.step === 2) {
        const text = msg.text.trim();
        const parts = text.split(/\s+/);
        const amountStr = parts[0];
        const note = parts.slice(1).join(' ');

        const amount = parseMoneyString(amountStr);
        if (!amount) {
            bot.sendMessage(chatId, '‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i (VD: 100k ti·ªÅn ƒëi·ªán)');
            return;
        }

        if (!note) {
            bot.sendMessage(chatId, '‚ùå Vui l√≤ng nh·∫≠p ghi ch√∫ cho nh·∫Øc nh·ªü');
            return;
        }

        // Create reminder object
        const reminder = {
            id: `reminder_${Date.now()}`,
            amount,
            note,
            period: state.period,
            chatId,
            cron: getCronExpression(state.period)
        };

        // Save reminder
        const reminders = loadReminders();
        reminders.push(reminder);
        saveReminders(reminders);

        // Schedule the reminder
        scheduleReminder(reminder);

        // Clear setup state
        reminderSetupStates.delete(chatId);

        bot.sendMessage(
            chatId,
            `‚úÖ ƒê√£ t·∫°o nh·∫Øc nh·ªü:\n\n` +
            `üìù Ghi ch√∫: ${reminder.note}\n` +
            `üí∞ S·ªë ti·ªÅn: ${formatCurrency(reminder.amount)}\n` +
            `üîÑ ƒê·ªãnh k·ª≥: ${reminder.period}`
        );
    }
});

// Helper function to get cron expression
function getCronExpression(period) {
    const now = new Date();
    switch (period) {
        case 'monthly':
            return `0 9 ${now.getDate()} * *`; // Same day every month at 9 AM
        case 'quarterly':
            return `0 9 ${now.getDate()} */3 *`; // Every 3 months
        case 'yearly':
            return `0 9 ${now.getDate()} ${now.getMonth() + 1} *`; // Same date every year
        default:
            return '0 9 1 * *'; // First day of every month at 9 AM
    }
}

// Schedule all reminders
function scheduleAllReminders() {
    const reminders = loadReminders();
    reminders.forEach(reminder => {
        scheduleReminder(reminder);
    });
}

// Schedule a single reminder
function scheduleReminder(reminder) {
    const job = schedule.scheduleJob(reminder.id, reminder.cron, () => {
        bot.sendMessage(reminder.chatId, 
            `‚è∞ NH·∫ÆC NH·ªû THANH TO√ÅN!\n\n` +
            `üí∞ Kho·∫£n: ${reminder.note}\n` +
            `üíµ S·ªë ti·ªÅn: ${formatCurrency(reminder.amount)}\n` +
            `üîÑ ƒê·ªãnh k·ª≥: ${reminder.period}`
        );
    });
    return job;
}

// Command to export Excel report
bot.onText(/\/xuatexcel/, async (msg) => {
    const chatId = msg.chat.id;
    const transactions = loadTransactions();
    
    if (transactions.length === 0) {
        bot.sendMessage(chatId, '‚ùå Ch∆∞a c√≥ giao d·ªãch n√†o ƒë·ªÉ xu·∫•t b√°o c√°o.');
        return;
    }

    const fileName = `BaoCaoThuChi_${new Date().toISOString().split('T')[0]}.xlsx`;
    const filePath = `./${fileName}`;

    try {
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Giao d·ªãch');

        // Add headers
        worksheet.columns = [
            { header: 'Ng√†y', key: 'date', width: 15 },
            { header: 'Lo·∫°i', key: 'type', width: 10 },
            { header: 'S·ªë ti·ªÅn', key: 'amount', width: 15 },
            { header: 'Ghi ch√∫', key: 'note', width: 30 },
            { header: 'T√†i kho·∫£n', key: 'account', width: 15 }
        ];

        // Style headers
        worksheet.getRow(1).font = { bold: true };
        worksheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFE0E0E0' }
        };

        // Add data
        transactions.forEach(t => {
            worksheet.addRow({
                date: new Date(t.ngay).toLocaleDateString('vi-VN'),
                type: t.loai === 'thu' ? 'Thu' : 'Chi',
                amount: t.sotien,
                note: t.ghichu,
                account: t.taikhoan
            });
        });

        // Format amount column
        worksheet.getColumn('amount').numFmt = '#,##0';
        
        // Add summary
        const totalIncome = transactions
            .filter(t => t.loai === 'thu')
            .reduce((sum, t) => sum + t.sotien, 0);
        const totalExpense = transactions
            .filter(t => t.loai === 'chi')
            .reduce((sum, t) => sum + t.sotien, 0);

        const summaryStartRow = worksheet.rowCount + 2;
        
        worksheet.addRow([]);
        const totalIncomeRow = worksheet.addRow(['T·ªïng thu', '', totalIncome]);
        const totalExpenseRow = worksheet.addRow(['T·ªïng chi', '', totalExpense]);
        const balanceRow = worksheet.addRow(['S·ªë d∆∞', '', totalIncome - totalExpense]);

        // Style summary rows
        [totalIncomeRow, totalExpenseRow, balanceRow].forEach(row => {
            if (row && row.getCell) {
                row.font = { bold: true };
                const amountCell = row.getCell(3);
                if (amountCell) {
                    amountCell.numFmt = '#,##0';
                }
            }
        });

        // Save file
        await workbook.xlsx.writeFile(filePath);

        // Send file using fs.createReadStream
        await bot.sendDocument(chatId, fs.createReadStream(filePath), {
            caption: 'üìä B√ÅO C√ÅO THU CHI\n' +
                    `üí∞ T·ªïng thu: ${formatCurrency(totalIncome)}\n` +
                    `üí∏ T·ªïng chi: ${formatCurrency(totalExpense)}\n` +
                    `üíé S·ªë d∆∞: ${formatCurrency(totalIncome - totalExpense)}`
        });

        // Delete file after sending
        fs.unlinkSync(filePath);

    } catch (error) {
        console.error('Error exporting Excel:', error);
        bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi xu·∫•t b√°o c√°o Excel. Chi ti·∫øt l·ªói: ' + error.message);
        
        // Clean up file if it exists
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
        }
    }
});

// Initialize reminders when bot starts
scheduleAllReminders();

// Error handling
bot.on('polling_error', (error) => {
    if (error.response && error.response.statusCode === 401) {
        console.error('Telegram token is invalid');
        process.exit(1);
    }
    console.error('Polling error:', error);
});
